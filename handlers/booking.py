from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ConversationHandler, MessageHandler, filters, ContextTypes
import sqlite3
from settings import DB_NAME, CITY_LIMITS

TRANSPORT, DATETIME, ROUTE, FLIGHT, LUGGAGE, AMOUNT, CONFIRM = range(7)

def get_transport_keyboard():
    return ReplyKeyboardMarkup([
        ["üõ´ –ê–≤–∏–∞–±–∏–ª–µ—Ç", "üöÜ –ñ/–¥ –±–∏–ª–µ—Ç"],
        ["üõ´‚úà –° –ø–µ—Ä–µ—Å–∞–¥–∫–æ–π", "üöÜ‚õì –° –ø–µ—Ä–µ—Å–∞–¥–∫–æ–π"]
    ], resize_keyboard=True)

def get_luggage_keyboard():
    return ReplyKeyboardMarkup([
        ["–° –±–∞–≥–∞–∂–æ–º", "–ë–µ–∑ –±–∞–≥–∞–∂–∞"]
    ], resize_keyboard=True)

def get_confirm_keyboard():
    return ReplyKeyboardMarkup([
        ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]
    ], resize_keyboard=True)

def start_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∏–ª–µ—Ç–∞:", reply_markup=get_transport_keyboard())
    return TRANSPORT

def transport_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["transport_type"] = update.message.text
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.04.2025 13:45):",
                              reply_markup=ReplyKeyboardRemove())
    return DATETIME

def date_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["datetime"] = update.message.text.strip()
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: –£—Ñ–∞ - –ú–æ—Å–∫–≤–∞):")
    return ROUTE

def route_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["route"] = update.message.text.strip()
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞/–ø–æ–µ–∑–¥–∞ –∏ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞:")
    return FLIGHT

def flight_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["flight"] = update.message.text.strip()
    if "–ê–≤–∏–∞–±–∏–ª–µ—Ç" in context.user_data["transport_type"]:
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–≥–∞–∂:", reply_markup=get_luggage_keyboard())
        return LUGGAGE
    else:
        context.user_data["luggage"] = "‚Äî"
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–∏–ª–µ—Ç–∞:")
        return AMOUNT

def luggage_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["luggage"] = update.message.text.strip()
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–∏–ª–µ—Ç–∞:", reply_markup=ReplyKeyboardRemove())
    return AMOUNT

def amount_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text.isdigit():
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏.")
        return AMOUNT

    amount = int(text)
    context.user_data["amount"] = amount

    user_id = update.effective_user.id
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT last_name, first_name, middle_name, base_city FROM users WHERE telegram_id = ?", (user_id,))
    row = cursor.fetchone()
    conn.close()

    if not row:
        update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return ConversationHandler.END

    last, first, middle, base_city = row
    fio = f"{last} {first} {middle}"
    limit = CITY_LIMITS.get(base_city, 0)

    context.user_data["fio"] = fio
    context.user_data["base_city"] = base_city
    context.user_data["limit"] = limit

    warning = "\n‚ö†Ô∏è –°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç!" if amount > limit else ""
    summary = (
        f"{fio}\n"
        f"–ë–∞–∑–æ–≤—ã–π –≥–æ—Ä–æ–¥: {base_city} (–ª–∏–º–∏—Ç {limit}‚ÇΩ)\n"
        f"–î–∞—Ç–∞/–≤—Ä–µ–º—è: {context.user_data['datetime']}\n"
        f"–ú–∞—Ä—à—Ä—É—Ç: {context.user_data['route']}\n"
        f"–†–µ–π—Å/–ø–æ–µ–∑–¥: {context.user_data['flight']}\n"
        f"–ë–∞–≥–∞–∂: {context.user_data['luggage']}\n"
        f"–°—É–º–º–∞: {amount}‚ÇΩ{warning}"
    )

    update.message.reply_text(summary + "\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?", reply_markup=get_confirm_keyboard())
    return CONFIRM

def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        update.message.reply_text("üéâ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", reply_markup=ReplyKeyboardRemove())
    else:
        update.message.reply_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

booking_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üì¶ –ó–∞–∫–∞–∑–∞—Ç—å –±–∏–ª–µ—Ç$"), start_booking)],
    states={
        TRANSPORT: [MessageHandler(filters.TEXT & ~filters.COMMAND, transport_chosen)],
        DATETIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, date_time_input)],
        ROUTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, route_input)],
        FLIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, flight_input)],
        LUGGAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, luggage_input)],
        AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, amount_input)],
        CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_booking)],
    },
    fallbacks=[],
)
