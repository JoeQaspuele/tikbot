from aiogram import types
from database import add_user, is_user_registered
from settings import CITY_LIMITS

user_temp_data = {}

def get_next_step(user_id):
    fields = ['first_name', 'last_name', 'middle_name', 'base_city']
    user_data = user_temp_data.get(user_id, {})
    for field in fields:
        if field not in user_data:
            return field
    return 'confirm'

async def handle_registration(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    if user_id not in user_temp_data:
        user_temp_data[user_id] = {}

    current_step = get_next_step(user_id)

    if current_step == 'first_name':
        user_temp_data[user_id]['first_name'] = text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    elif current_step == 'last_name':
        user_temp_data[user_id]['last_name'] = text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ:")
    elif current_step == 'middle_name':
        user_temp_data[user_id]['middle_name'] = text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±–∞–∑–æ–≤—ã–π –≥–æ—Ä–æ–¥:")
    elif current_step == 'base_city':
        if text not in CITY_LIMITS:
            await message.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö. –£—Ç–æ—á–Ω–∏—Ç–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        user_temp_data[user_id]['base_city'] = text

        data = user_temp_data[user_id]
        full_name = f"{data['last_name']} {data['first_name']} {data['middle_name']}"
        limit = CITY_LIMITS[text]
        await message.answer(
            f"{full_name}\n–ë–∞–∑–æ–≤—ã–π –≥–æ—Ä–æ–¥: {text}\n–í–∞—à –ª–∏–º–∏—Ç –Ω–∞ –ø—Ä–æ–µ–∑–¥: {limit} —Ä—É–±–ª–µ–π.\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ?",
            reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
        )
    elif current_step == 'confirm':
        if text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
            data = user_temp_data.pop(user_id)
            add_user(user_id, data['first_name'], data['last_name'], data['middle_name'], data['base_city'])
            await message.answer("üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=types.ReplyKeyboardRemove())
        else:
            user_temp_data.pop(user_id, None)
            await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
